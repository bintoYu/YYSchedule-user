/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.YYSchedule.common.rpc.domain.job;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.10.0)", date = "2018-09-30")
public class Job implements org.apache.thrift.TBase<Job, Job._Fields>, java.io.Serializable, Cloneable, Comparable<Job> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Job");

  private static final org.apache.thrift.protocol.TField JOB_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("jobId", org.apache.thrift.protocol.TType.I64, (short)1);
  private static final org.apache.thrift.protocol.TField JOB_PRIORITY_FIELD_DESC = new org.apache.thrift.protocol.TField("jobPriority", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField TASK_PHASE_FIELD_DESC = new org.apache.thrift.protocol.TField("taskPhase", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField FILE_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField("fileList", org.apache.thrift.protocol.TType.LIST, (short)4);
  private static final org.apache.thrift.protocol.TField TIMEOUT_FIELD_DESC = new org.apache.thrift.protocol.TField("timeout", org.apache.thrift.protocol.TType.I64, (short)5);
  private static final org.apache.thrift.protocol.TField JOB_PARAMETER_FIELD_DESC = new org.apache.thrift.protocol.TField("jobParameter", org.apache.thrift.protocol.TType.STRUCT, (short)6);
  private static final org.apache.thrift.protocol.TField JOB_STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("jobStatus", org.apache.thrift.protocol.TType.DOUBLE, (short)7);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new JobStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new JobTupleSchemeFactory();

  public long jobId; // optional
  /**
   * 
   * @see JobPriority
   */
  public JobPriority jobPriority; // required
  /**
   * 
   * @see com.YYSchedule.common.rpc.domain.task.TaskPhase
   */
  public com.YYSchedule.common.rpc.domain.task.TaskPhase taskPhase; // required
  public java.util.List<java.lang.String> fileList; // required
  public long timeout; // optional
  public com.YYSchedule.common.rpc.domain.parameter.JobParameter jobParameter; // required
  public double jobStatus; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    JOB_ID((short)1, "jobId"),
    /**
     * 
     * @see JobPriority
     */
    JOB_PRIORITY((short)2, "jobPriority"),
    /**
     * 
     * @see com.YYSchedule.common.rpc.domain.task.TaskPhase
     */
    TASK_PHASE((short)3, "taskPhase"),
    FILE_LIST((short)4, "fileList"),
    TIMEOUT((short)5, "timeout"),
    JOB_PARAMETER((short)6, "jobParameter"),
    JOB_STATUS((short)7, "jobStatus");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // JOB_ID
          return JOB_ID;
        case 2: // JOB_PRIORITY
          return JOB_PRIORITY;
        case 3: // TASK_PHASE
          return TASK_PHASE;
        case 4: // FILE_LIST
          return FILE_LIST;
        case 5: // TIMEOUT
          return TIMEOUT;
        case 6: // JOB_PARAMETER
          return JOB_PARAMETER;
        case 7: // JOB_STATUS
          return JOB_STATUS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __JOBID_ISSET_ID = 0;
  private static final int __TIMEOUT_ISSET_ID = 1;
  private static final int __JOBSTATUS_ISSET_ID = 2;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.JOB_ID,_Fields.TIMEOUT,_Fields.JOB_STATUS};
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.JOB_ID, new org.apache.thrift.meta_data.FieldMetaData("jobId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.JOB_PRIORITY, new org.apache.thrift.meta_data.FieldMetaData("jobPriority", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, JobPriority.class)));
    tmpMap.put(_Fields.TASK_PHASE, new org.apache.thrift.meta_data.FieldMetaData("taskPhase", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, com.YYSchedule.common.rpc.domain.task.TaskPhase.class)));
    tmpMap.put(_Fields.FILE_LIST, new org.apache.thrift.meta_data.FieldMetaData("fileList", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.TIMEOUT, new org.apache.thrift.meta_data.FieldMetaData("timeout", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.JOB_PARAMETER, new org.apache.thrift.meta_data.FieldMetaData("jobParameter", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.YYSchedule.common.rpc.domain.parameter.JobParameter.class)));
    tmpMap.put(_Fields.JOB_STATUS, new org.apache.thrift.meta_data.FieldMetaData("jobStatus", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Job.class, metaDataMap);
  }

  public Job() {
  }

  public Job(
    JobPriority jobPriority,
    com.YYSchedule.common.rpc.domain.task.TaskPhase taskPhase,
    java.util.List<java.lang.String> fileList,
    com.YYSchedule.common.rpc.domain.parameter.JobParameter jobParameter)
  {
    this();
    this.jobPriority = jobPriority;
    this.taskPhase = taskPhase;
    this.fileList = fileList;
    this.jobParameter = jobParameter;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public Job(Job other) {
    __isset_bitfield = other.__isset_bitfield;
    this.jobId = other.jobId;
    if (other.isSetJobPriority()) {
      this.jobPriority = other.jobPriority;
    }
    if (other.isSetTaskPhase()) {
      this.taskPhase = other.taskPhase;
    }
    if (other.isSetFileList()) {
      java.util.List<java.lang.String> __this__fileList = new java.util.ArrayList<java.lang.String>(other.fileList);
      this.fileList = __this__fileList;
    }
    this.timeout = other.timeout;
    if (other.isSetJobParameter()) {
      this.jobParameter = new com.YYSchedule.common.rpc.domain.parameter.JobParameter(other.jobParameter);
    }
    this.jobStatus = other.jobStatus;
  }

  public Job deepCopy() {
    return new Job(this);
  }

  @Override
  public void clear() {
    setJobIdIsSet(false);
    this.jobId = 0;
    this.jobPriority = null;
    this.taskPhase = null;
    this.fileList = null;
    setTimeoutIsSet(false);
    this.timeout = 0;
    this.jobParameter = null;
    setJobStatusIsSet(false);
    this.jobStatus = 0.0;
  }

  public long getJobId() {
    return this.jobId;
  }

  public Job setJobId(long jobId) {
    this.jobId = jobId;
    setJobIdIsSet(true);
    return this;
  }

  public void unsetJobId() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __JOBID_ISSET_ID);
  }

  /** Returns true if field jobId is set (has been assigned a value) and false otherwise */
  public boolean isSetJobId() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __JOBID_ISSET_ID);
  }

  public void setJobIdIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __JOBID_ISSET_ID, value);
  }

  /**
   * 
   * @see JobPriority
   */
  public JobPriority getJobPriority() {
    return this.jobPriority;
  }

  /**
   * 
   * @see JobPriority
   */
  public Job setJobPriority(JobPriority jobPriority) {
    this.jobPriority = jobPriority;
    return this;
  }

  public void unsetJobPriority() {
    this.jobPriority = null;
  }

  /** Returns true if field jobPriority is set (has been assigned a value) and false otherwise */
  public boolean isSetJobPriority() {
    return this.jobPriority != null;
  }

  public void setJobPriorityIsSet(boolean value) {
    if (!value) {
      this.jobPriority = null;
    }
  }

  /**
   * 
   * @see com.YYSchedule.common.rpc.domain.task.TaskPhase
   */
  public com.YYSchedule.common.rpc.domain.task.TaskPhase getTaskPhase() {
    return this.taskPhase;
  }

  /**
   * 
   * @see com.YYSchedule.common.rpc.domain.task.TaskPhase
   */
  public Job setTaskPhase(com.YYSchedule.common.rpc.domain.task.TaskPhase taskPhase) {
    this.taskPhase = taskPhase;
    return this;
  }

  public void unsetTaskPhase() {
    this.taskPhase = null;
  }

  /** Returns true if field taskPhase is set (has been assigned a value) and false otherwise */
  public boolean isSetTaskPhase() {
    return this.taskPhase != null;
  }

  public void setTaskPhaseIsSet(boolean value) {
    if (!value) {
      this.taskPhase = null;
    }
  }

  public int getFileListSize() {
    return (this.fileList == null) ? 0 : this.fileList.size();
  }

  public java.util.Iterator<java.lang.String> getFileListIterator() {
    return (this.fileList == null) ? null : this.fileList.iterator();
  }

  public void addToFileList(java.lang.String elem) {
    if (this.fileList == null) {
      this.fileList = new java.util.ArrayList<java.lang.String>();
    }
    this.fileList.add(elem);
  }

  public java.util.List<java.lang.String> getFileList() {
    return this.fileList;
  }

  public Job setFileList(java.util.List<java.lang.String> fileList) {
    this.fileList = fileList;
    return this;
  }

  public void unsetFileList() {
    this.fileList = null;
  }

  /** Returns true if field fileList is set (has been assigned a value) and false otherwise */
  public boolean isSetFileList() {
    return this.fileList != null;
  }

  public void setFileListIsSet(boolean value) {
    if (!value) {
      this.fileList = null;
    }
  }

  public long getTimeout() {
    return this.timeout;
  }

  public Job setTimeout(long timeout) {
    this.timeout = timeout;
    setTimeoutIsSet(true);
    return this;
  }

  public void unsetTimeout() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __TIMEOUT_ISSET_ID);
  }

  /** Returns true if field timeout is set (has been assigned a value) and false otherwise */
  public boolean isSetTimeout() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __TIMEOUT_ISSET_ID);
  }

  public void setTimeoutIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __TIMEOUT_ISSET_ID, value);
  }

  public com.YYSchedule.common.rpc.domain.parameter.JobParameter getJobParameter() {
    return this.jobParameter;
  }

  public Job setJobParameter(com.YYSchedule.common.rpc.domain.parameter.JobParameter jobParameter) {
    this.jobParameter = jobParameter;
    return this;
  }

  public void unsetJobParameter() {
    this.jobParameter = null;
  }

  /** Returns true if field jobParameter is set (has been assigned a value) and false otherwise */
  public boolean isSetJobParameter() {
    return this.jobParameter != null;
  }

  public void setJobParameterIsSet(boolean value) {
    if (!value) {
      this.jobParameter = null;
    }
  }

  public double getJobStatus() {
    return this.jobStatus;
  }

  public Job setJobStatus(double jobStatus) {
    this.jobStatus = jobStatus;
    setJobStatusIsSet(true);
    return this;
  }

  public void unsetJobStatus() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __JOBSTATUS_ISSET_ID);
  }

  /** Returns true if field jobStatus is set (has been assigned a value) and false otherwise */
  public boolean isSetJobStatus() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __JOBSTATUS_ISSET_ID);
  }

  public void setJobStatusIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __JOBSTATUS_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, java.lang.Object value) {
    switch (field) {
    case JOB_ID:
      if (value == null) {
        unsetJobId();
      } else {
        setJobId((java.lang.Long)value);
      }
      break;

    case JOB_PRIORITY:
      if (value == null) {
        unsetJobPriority();
      } else {
        setJobPriority((JobPriority)value);
      }
      break;

    case TASK_PHASE:
      if (value == null) {
        unsetTaskPhase();
      } else {
        setTaskPhase((com.YYSchedule.common.rpc.domain.task.TaskPhase)value);
      }
      break;

    case FILE_LIST:
      if (value == null) {
        unsetFileList();
      } else {
        setFileList((java.util.List<java.lang.String>)value);
      }
      break;

    case TIMEOUT:
      if (value == null) {
        unsetTimeout();
      } else {
        setTimeout((java.lang.Long)value);
      }
      break;

    case JOB_PARAMETER:
      if (value == null) {
        unsetJobParameter();
      } else {
        setJobParameter((com.YYSchedule.common.rpc.domain.parameter.JobParameter)value);
      }
      break;

    case JOB_STATUS:
      if (value == null) {
        unsetJobStatus();
      } else {
        setJobStatus((java.lang.Double)value);
      }
      break;

    }
  }

  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case JOB_ID:
      return getJobId();

    case JOB_PRIORITY:
      return getJobPriority();

    case TASK_PHASE:
      return getTaskPhase();

    case FILE_LIST:
      return getFileList();

    case TIMEOUT:
      return getTimeout();

    case JOB_PARAMETER:
      return getJobParameter();

    case JOB_STATUS:
      return getJobStatus();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case JOB_ID:
      return isSetJobId();
    case JOB_PRIORITY:
      return isSetJobPriority();
    case TASK_PHASE:
      return isSetTaskPhase();
    case FILE_LIST:
      return isSetFileList();
    case TIMEOUT:
      return isSetTimeout();
    case JOB_PARAMETER:
      return isSetJobParameter();
    case JOB_STATUS:
      return isSetJobStatus();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof Job)
      return this.equals((Job)that);
    return false;
  }

  public boolean equals(Job that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_jobId = true && this.isSetJobId();
    boolean that_present_jobId = true && that.isSetJobId();
    if (this_present_jobId || that_present_jobId) {
      if (!(this_present_jobId && that_present_jobId))
        return false;
      if (this.jobId != that.jobId)
        return false;
    }

    boolean this_present_jobPriority = true && this.isSetJobPriority();
    boolean that_present_jobPriority = true && that.isSetJobPriority();
    if (this_present_jobPriority || that_present_jobPriority) {
      if (!(this_present_jobPriority && that_present_jobPriority))
        return false;
      if (!this.jobPriority.equals(that.jobPriority))
        return false;
    }

    boolean this_present_taskPhase = true && this.isSetTaskPhase();
    boolean that_present_taskPhase = true && that.isSetTaskPhase();
    if (this_present_taskPhase || that_present_taskPhase) {
      if (!(this_present_taskPhase && that_present_taskPhase))
        return false;
      if (!this.taskPhase.equals(that.taskPhase))
        return false;
    }

    boolean this_present_fileList = true && this.isSetFileList();
    boolean that_present_fileList = true && that.isSetFileList();
    if (this_present_fileList || that_present_fileList) {
      if (!(this_present_fileList && that_present_fileList))
        return false;
      if (!this.fileList.equals(that.fileList))
        return false;
    }

    boolean this_present_timeout = true && this.isSetTimeout();
    boolean that_present_timeout = true && that.isSetTimeout();
    if (this_present_timeout || that_present_timeout) {
      if (!(this_present_timeout && that_present_timeout))
        return false;
      if (this.timeout != that.timeout)
        return false;
    }

    boolean this_present_jobParameter = true && this.isSetJobParameter();
    boolean that_present_jobParameter = true && that.isSetJobParameter();
    if (this_present_jobParameter || that_present_jobParameter) {
      if (!(this_present_jobParameter && that_present_jobParameter))
        return false;
      if (!this.jobParameter.equals(that.jobParameter))
        return false;
    }

    boolean this_present_jobStatus = true && this.isSetJobStatus();
    boolean that_present_jobStatus = true && that.isSetJobStatus();
    if (this_present_jobStatus || that_present_jobStatus) {
      if (!(this_present_jobStatus && that_present_jobStatus))
        return false;
      if (this.jobStatus != that.jobStatus)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetJobId()) ? 131071 : 524287);
    if (isSetJobId())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(jobId);

    hashCode = hashCode * 8191 + ((isSetJobPriority()) ? 131071 : 524287);
    if (isSetJobPriority())
      hashCode = hashCode * 8191 + jobPriority.getValue();

    hashCode = hashCode * 8191 + ((isSetTaskPhase()) ? 131071 : 524287);
    if (isSetTaskPhase())
      hashCode = hashCode * 8191 + taskPhase.getValue();

    hashCode = hashCode * 8191 + ((isSetFileList()) ? 131071 : 524287);
    if (isSetFileList())
      hashCode = hashCode * 8191 + fileList.hashCode();

    hashCode = hashCode * 8191 + ((isSetTimeout()) ? 131071 : 524287);
    if (isSetTimeout())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(timeout);

    hashCode = hashCode * 8191 + ((isSetJobParameter()) ? 131071 : 524287);
    if (isSetJobParameter())
      hashCode = hashCode * 8191 + jobParameter.hashCode();

    hashCode = hashCode * 8191 + ((isSetJobStatus()) ? 131071 : 524287);
    if (isSetJobStatus())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(jobStatus);

    return hashCode;
  }

  @Override
  public int compareTo(Job other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(isSetJobId()).compareTo(other.isSetJobId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetJobId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.jobId, other.jobId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetJobPriority()).compareTo(other.isSetJobPriority());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetJobPriority()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.jobPriority, other.jobPriority);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetTaskPhase()).compareTo(other.isSetTaskPhase());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTaskPhase()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.taskPhase, other.taskPhase);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetFileList()).compareTo(other.isSetFileList());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFileList()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fileList, other.fileList);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetTimeout()).compareTo(other.isSetTimeout());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTimeout()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.timeout, other.timeout);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetJobParameter()).compareTo(other.isSetJobParameter());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetJobParameter()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.jobParameter, other.jobParameter);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetJobStatus()).compareTo(other.isSetJobStatus());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetJobStatus()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.jobStatus, other.jobStatus);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("Job(");
    boolean first = true;

    if (isSetJobId()) {
      sb.append("jobId:");
      sb.append(this.jobId);
      first = false;
    }
    if (!first) sb.append(", ");
    sb.append("jobPriority:");
    if (this.jobPriority == null) {
      sb.append("null");
    } else {
      sb.append(this.jobPriority);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("taskPhase:");
    if (this.taskPhase == null) {
      sb.append("null");
    } else {
      sb.append(this.taskPhase);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("fileList:");
    if (this.fileList == null) {
      sb.append("null");
    } else {
      sb.append(this.fileList);
    }
    first = false;
    if (isSetTimeout()) {
      if (!first) sb.append(", ");
      sb.append("timeout:");
      sb.append(this.timeout);
      first = false;
    }
    if (!first) sb.append(", ");
    sb.append("jobParameter:");
    if (this.jobParameter == null) {
      sb.append("null");
    } else {
      sb.append(this.jobParameter);
    }
    first = false;
    if (isSetJobStatus()) {
      if (!first) sb.append(", ");
      sb.append("jobStatus:");
      sb.append(this.jobStatus);
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (jobPriority == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'jobPriority' was not present! Struct: " + toString());
    }
    if (taskPhase == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'taskPhase' was not present! Struct: " + toString());
    }
    if (fileList == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'fileList' was not present! Struct: " + toString());
    }
    if (jobParameter == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'jobParameter' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
    if (jobParameter != null) {
      jobParameter.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class JobStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public JobStandardScheme getScheme() {
      return new JobStandardScheme();
    }
  }

  private static class JobStandardScheme extends org.apache.thrift.scheme.StandardScheme<Job> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, Job struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // JOB_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.jobId = iprot.readI64();
              struct.setJobIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // JOB_PRIORITY
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.jobPriority = com.YYSchedule.common.rpc.domain.job.JobPriority.findByValue(iprot.readI32());
              struct.setJobPriorityIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // TASK_PHASE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.taskPhase = com.YYSchedule.common.rpc.domain.task.TaskPhase.findByValue(iprot.readI32());
              struct.setTaskPhaseIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // FILE_LIST
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
                struct.fileList = new java.util.ArrayList<java.lang.String>(_list0.size);
                java.lang.String _elem1;
                for (int _i2 = 0; _i2 < _list0.size; ++_i2)
                {
                  _elem1 = iprot.readString();
                  struct.fileList.add(_elem1);
                }
                iprot.readListEnd();
              }
              struct.setFileListIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // TIMEOUT
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.timeout = iprot.readI64();
              struct.setTimeoutIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // JOB_PARAMETER
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.jobParameter = new com.YYSchedule.common.rpc.domain.parameter.JobParameter();
              struct.jobParameter.read(iprot);
              struct.setJobParameterIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // JOB_STATUS
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.jobStatus = iprot.readDouble();
              struct.setJobStatusIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, Job struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.isSetJobId()) {
        oprot.writeFieldBegin(JOB_ID_FIELD_DESC);
        oprot.writeI64(struct.jobId);
        oprot.writeFieldEnd();
      }
      if (struct.jobPriority != null) {
        oprot.writeFieldBegin(JOB_PRIORITY_FIELD_DESC);
        oprot.writeI32(struct.jobPriority.getValue());
        oprot.writeFieldEnd();
      }
      if (struct.taskPhase != null) {
        oprot.writeFieldBegin(TASK_PHASE_FIELD_DESC);
        oprot.writeI32(struct.taskPhase.getValue());
        oprot.writeFieldEnd();
      }
      if (struct.fileList != null) {
        oprot.writeFieldBegin(FILE_LIST_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.fileList.size()));
          for (java.lang.String _iter3 : struct.fileList)
          {
            oprot.writeString(_iter3);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.isSetTimeout()) {
        oprot.writeFieldBegin(TIMEOUT_FIELD_DESC);
        oprot.writeI64(struct.timeout);
        oprot.writeFieldEnd();
      }
      if (struct.jobParameter != null) {
        oprot.writeFieldBegin(JOB_PARAMETER_FIELD_DESC);
        struct.jobParameter.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.isSetJobStatus()) {
        oprot.writeFieldBegin(JOB_STATUS_FIELD_DESC);
        oprot.writeDouble(struct.jobStatus);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class JobTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public JobTupleScheme getScheme() {
      return new JobTupleScheme();
    }
  }

  private static class JobTupleScheme extends org.apache.thrift.scheme.TupleScheme<Job> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, Job struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      oprot.writeI32(struct.jobPriority.getValue());
      oprot.writeI32(struct.taskPhase.getValue());
      {
        oprot.writeI32(struct.fileList.size());
        for (java.lang.String _iter4 : struct.fileList)
        {
          oprot.writeString(_iter4);
        }
      }
      struct.jobParameter.write(oprot);
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetJobId()) {
        optionals.set(0);
      }
      if (struct.isSetTimeout()) {
        optionals.set(1);
      }
      if (struct.isSetJobStatus()) {
        optionals.set(2);
      }
      oprot.writeBitSet(optionals, 3);
      if (struct.isSetJobId()) {
        oprot.writeI64(struct.jobId);
      }
      if (struct.isSetTimeout()) {
        oprot.writeI64(struct.timeout);
      }
      if (struct.isSetJobStatus()) {
        oprot.writeDouble(struct.jobStatus);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, Job struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      struct.jobPriority = com.YYSchedule.common.rpc.domain.job.JobPriority.findByValue(iprot.readI32());
      struct.setJobPriorityIsSet(true);
      struct.taskPhase = com.YYSchedule.common.rpc.domain.task.TaskPhase.findByValue(iprot.readI32());
      struct.setTaskPhaseIsSet(true);
      {
        org.apache.thrift.protocol.TList _list5 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
        struct.fileList = new java.util.ArrayList<java.lang.String>(_list5.size);
        java.lang.String _elem6;
        for (int _i7 = 0; _i7 < _list5.size; ++_i7)
        {
          _elem6 = iprot.readString();
          struct.fileList.add(_elem6);
        }
      }
      struct.setFileListIsSet(true);
      struct.jobParameter = new com.YYSchedule.common.rpc.domain.parameter.JobParameter();
      struct.jobParameter.read(iprot);
      struct.setJobParameterIsSet(true);
      java.util.BitSet incoming = iprot.readBitSet(3);
      if (incoming.get(0)) {
        struct.jobId = iprot.readI64();
        struct.setJobIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.timeout = iprot.readI64();
        struct.setTimeoutIsSet(true);
      }
      if (incoming.get(2)) {
        struct.jobStatus = iprot.readDouble();
        struct.setJobStatusIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

