/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.YYSchedule.common.rpc.domain.parameter;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
/**
 * container context parameter
 */
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.10.0)", date = "2018-06-25")
public class ContextParameter implements org.apache.thrift.TBase<ContextParameter, ContextParameter._Fields>, java.io.Serializable, Cloneable, Comparable<ContextParameter> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ContextParameter");

  private static final org.apache.thrift.protocol.TField SEQUENCE_NUM_FIELD_DESC = new org.apache.thrift.protocol.TField("sequenceNum", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField OPT_FIELD_DESC = new org.apache.thrift.protocol.TField("opt", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField CONTENT_FIELD_DESC = new org.apache.thrift.protocol.TField("content", org.apache.thrift.protocol.TType.STRING, (short)3);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new ContextParameterStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new ContextParameterTupleSchemeFactory();

  public int sequenceNum; // required
  public java.lang.String opt; // optional
  public java.lang.String content; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    SEQUENCE_NUM((short)1, "sequenceNum"),
    OPT((short)2, "opt"),
    CONTENT((short)3, "content");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // SEQUENCE_NUM
          return SEQUENCE_NUM;
        case 2: // OPT
          return OPT;
        case 3: // CONTENT
          return CONTENT;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __SEQUENCENUM_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.OPT,_Fields.CONTENT};
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.SEQUENCE_NUM, new org.apache.thrift.meta_data.FieldMetaData("sequenceNum", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.OPT, new org.apache.thrift.meta_data.FieldMetaData("opt", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CONTENT, new org.apache.thrift.meta_data.FieldMetaData("content", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ContextParameter.class, metaDataMap);
  }

  public ContextParameter() {
  }

  public ContextParameter(
    int sequenceNum)
  {
    this();
    this.sequenceNum = sequenceNum;
    setSequenceNumIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public ContextParameter(ContextParameter other) {
    __isset_bitfield = other.__isset_bitfield;
    this.sequenceNum = other.sequenceNum;
    if (other.isSetOpt()) {
      this.opt = other.opt;
    }
    if (other.isSetContent()) {
      this.content = other.content;
    }
  }

  public ContextParameter deepCopy() {
    return new ContextParameter(this);
  }

  @Override
  public void clear() {
    setSequenceNumIsSet(false);
    this.sequenceNum = 0;
    this.opt = null;
    this.content = null;
  }

  public int getSequenceNum() {
    return this.sequenceNum;
  }

  public ContextParameter setSequenceNum(int sequenceNum) {
    this.sequenceNum = sequenceNum;
    setSequenceNumIsSet(true);
    return this;
  }

  public void unsetSequenceNum() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SEQUENCENUM_ISSET_ID);
  }

  /** Returns true if field sequenceNum is set (has been assigned a value) and false otherwise */
  public boolean isSetSequenceNum() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SEQUENCENUM_ISSET_ID);
  }

  public void setSequenceNumIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SEQUENCENUM_ISSET_ID, value);
  }

  public java.lang.String getOpt() {
    return this.opt;
  }

  public ContextParameter setOpt(java.lang.String opt) {
    this.opt = opt;
    return this;
  }

  public void unsetOpt() {
    this.opt = null;
  }

  /** Returns true if field opt is set (has been assigned a value) and false otherwise */
  public boolean isSetOpt() {
    return this.opt != null;
  }

  public void setOptIsSet(boolean value) {
    if (!value) {
      this.opt = null;
    }
  }

  public java.lang.String getContent() {
    return this.content;
  }

  public ContextParameter setContent(java.lang.String content) {
    this.content = content;
    return this;
  }

  public void unsetContent() {
    this.content = null;
  }

  /** Returns true if field content is set (has been assigned a value) and false otherwise */
  public boolean isSetContent() {
    return this.content != null;
  }

  public void setContentIsSet(boolean value) {
    if (!value) {
      this.content = null;
    }
  }

  public void setFieldValue(_Fields field, java.lang.Object value) {
    switch (field) {
    case SEQUENCE_NUM:
      if (value == null) {
        unsetSequenceNum();
      } else {
        setSequenceNum((java.lang.Integer)value);
      }
      break;

    case OPT:
      if (value == null) {
        unsetOpt();
      } else {
        setOpt((java.lang.String)value);
      }
      break;

    case CONTENT:
      if (value == null) {
        unsetContent();
      } else {
        setContent((java.lang.String)value);
      }
      break;

    }
  }

  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case SEQUENCE_NUM:
      return getSequenceNum();

    case OPT:
      return getOpt();

    case CONTENT:
      return getContent();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case SEQUENCE_NUM:
      return isSetSequenceNum();
    case OPT:
      return isSetOpt();
    case CONTENT:
      return isSetContent();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof ContextParameter)
      return this.equals((ContextParameter)that);
    return false;
  }

  public boolean equals(ContextParameter that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_sequenceNum = true;
    boolean that_present_sequenceNum = true;
    if (this_present_sequenceNum || that_present_sequenceNum) {
      if (!(this_present_sequenceNum && that_present_sequenceNum))
        return false;
      if (this.sequenceNum != that.sequenceNum)
        return false;
    }

    boolean this_present_opt = true && this.isSetOpt();
    boolean that_present_opt = true && that.isSetOpt();
    if (this_present_opt || that_present_opt) {
      if (!(this_present_opt && that_present_opt))
        return false;
      if (!this.opt.equals(that.opt))
        return false;
    }

    boolean this_present_content = true && this.isSetContent();
    boolean that_present_content = true && that.isSetContent();
    if (this_present_content || that_present_content) {
      if (!(this_present_content && that_present_content))
        return false;
      if (!this.content.equals(that.content))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + sequenceNum;

    hashCode = hashCode * 8191 + ((isSetOpt()) ? 131071 : 524287);
    if (isSetOpt())
      hashCode = hashCode * 8191 + opt.hashCode();

    hashCode = hashCode * 8191 + ((isSetContent()) ? 131071 : 524287);
    if (isSetContent())
      hashCode = hashCode * 8191 + content.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(ContextParameter other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(isSetSequenceNum()).compareTo(other.isSetSequenceNum());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSequenceNum()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sequenceNum, other.sequenceNum);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetOpt()).compareTo(other.isSetOpt());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOpt()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.opt, other.opt);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetContent()).compareTo(other.isSetContent());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetContent()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.content, other.content);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("ContextParameter(");
    boolean first = true;

    sb.append("sequenceNum:");
    sb.append(this.sequenceNum);
    first = false;
    if (isSetOpt()) {
      if (!first) sb.append(", ");
      sb.append("opt:");
      if (this.opt == null) {
        sb.append("null");
      } else {
        sb.append(this.opt);
      }
      first = false;
    }
    if (isSetContent()) {
      if (!first) sb.append(", ");
      sb.append("content:");
      if (this.content == null) {
        sb.append("null");
      } else {
        sb.append(this.content);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // alas, we cannot check 'sequenceNum' because it's a primitive and you chose the non-beans generator.
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class ContextParameterStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public ContextParameterStandardScheme getScheme() {
      return new ContextParameterStandardScheme();
    }
  }

  private static class ContextParameterStandardScheme extends org.apache.thrift.scheme.StandardScheme<ContextParameter> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, ContextParameter struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // SEQUENCE_NUM
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.sequenceNum = iprot.readI32();
              struct.setSequenceNumIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // OPT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.opt = iprot.readString();
              struct.setOptIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // CONTENT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.content = iprot.readString();
              struct.setContentIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      if (!struct.isSetSequenceNum()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'sequenceNum' was not found in serialized data! Struct: " + toString());
      }
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, ContextParameter struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(SEQUENCE_NUM_FIELD_DESC);
      oprot.writeI32(struct.sequenceNum);
      oprot.writeFieldEnd();
      if (struct.opt != null) {
        if (struct.isSetOpt()) {
          oprot.writeFieldBegin(OPT_FIELD_DESC);
          oprot.writeString(struct.opt);
          oprot.writeFieldEnd();
        }
      }
      if (struct.content != null) {
        if (struct.isSetContent()) {
          oprot.writeFieldBegin(CONTENT_FIELD_DESC);
          oprot.writeString(struct.content);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class ContextParameterTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public ContextParameterTupleScheme getScheme() {
      return new ContextParameterTupleScheme();
    }
  }

  private static class ContextParameterTupleScheme extends org.apache.thrift.scheme.TupleScheme<ContextParameter> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, ContextParameter struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      oprot.writeI32(struct.sequenceNum);
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetOpt()) {
        optionals.set(0);
      }
      if (struct.isSetContent()) {
        optionals.set(1);
      }
      oprot.writeBitSet(optionals, 2);
      if (struct.isSetOpt()) {
        oprot.writeString(struct.opt);
      }
      if (struct.isSetContent()) {
        oprot.writeString(struct.content);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, ContextParameter struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      struct.sequenceNum = iprot.readI32();
      struct.setSequenceNumIsSet(true);
      java.util.BitSet incoming = iprot.readBitSet(2);
      if (incoming.get(0)) {
        struct.opt = iprot.readString();
        struct.setOptIsSet(true);
      }
      if (incoming.get(1)) {
        struct.content = iprot.readString();
        struct.setContentIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

