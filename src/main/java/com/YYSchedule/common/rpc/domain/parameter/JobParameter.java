/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.YYSchedule.common.rpc.domain.parameter;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
/**
 * job parameter
 */
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.10.0)", date = "2018-06-25")
public class JobParameter implements org.apache.thrift.TBase<JobParameter, JobParameter._Fields>, java.io.Serializable, Cloneable, Comparable<JobParameter> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("JobParameter");

  private static final org.apache.thrift.protocol.TField TASK_PHASE_FIELD_DESC = new org.apache.thrift.protocol.TField("taskPhase", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField CONTEXT_PARAMETER_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField("contextParameterList", org.apache.thrift.protocol.TType.LIST, (short)2);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new JobParameterStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new JobParameterTupleSchemeFactory();

  /**
   * 
   * @see com.YYSchedule.common.rpc.domain.task.TaskPhase
   */
  public com.YYSchedule.common.rpc.domain.task.TaskPhase taskPhase; // required
  public java.util.List<ContextParameter> contextParameterList; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    /**
     * 
     * @see com.YYSchedule.common.rpc.domain.task.TaskPhase
     */
    TASK_PHASE((short)1, "taskPhase"),
    CONTEXT_PARAMETER_LIST((short)2, "contextParameterList");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // TASK_PHASE
          return TASK_PHASE;
        case 2: // CONTEXT_PARAMETER_LIST
          return CONTEXT_PARAMETER_LIST;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final _Fields optionals[] = {_Fields.CONTEXT_PARAMETER_LIST};
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.TASK_PHASE, new org.apache.thrift.meta_data.FieldMetaData("taskPhase", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, com.YYSchedule.common.rpc.domain.task.TaskPhase.class)));
    tmpMap.put(_Fields.CONTEXT_PARAMETER_LIST, new org.apache.thrift.meta_data.FieldMetaData("contextParameterList", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ContextParameter.class))));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(JobParameter.class, metaDataMap);
  }

  public JobParameter() {
  }

  public JobParameter(
    com.YYSchedule.common.rpc.domain.task.TaskPhase taskPhase)
  {
    this();
    this.taskPhase = taskPhase;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public JobParameter(JobParameter other) {
    if (other.isSetTaskPhase()) {
      this.taskPhase = other.taskPhase;
    }
    if (other.isSetContextParameterList()) {
      java.util.List<ContextParameter> __this__contextParameterList = new java.util.ArrayList<ContextParameter>(other.contextParameterList.size());
      for (ContextParameter other_element : other.contextParameterList) {
        __this__contextParameterList.add(new ContextParameter(other_element));
      }
      this.contextParameterList = __this__contextParameterList;
    }
  }

  public JobParameter deepCopy() {
    return new JobParameter(this);
  }

  @Override
  public void clear() {
    this.taskPhase = null;
    this.contextParameterList = null;
  }

  /**
   * 
   * @see com.YYSchedule.common.rpc.domain.task.TaskPhase
   */
  public com.YYSchedule.common.rpc.domain.task.TaskPhase getTaskPhase() {
    return this.taskPhase;
  }

  /**
   * 
   * @see com.YYSchedule.common.rpc.domain.task.TaskPhase
   */
  public JobParameter setTaskPhase(com.YYSchedule.common.rpc.domain.task.TaskPhase taskPhase) {
    this.taskPhase = taskPhase;
    return this;
  }

  public void unsetTaskPhase() {
    this.taskPhase = null;
  }

  /** Returns true if field taskPhase is set (has been assigned a value) and false otherwise */
  public boolean isSetTaskPhase() {
    return this.taskPhase != null;
  }

  public void setTaskPhaseIsSet(boolean value) {
    if (!value) {
      this.taskPhase = null;
    }
  }

  public int getContextParameterListSize() {
    return (this.contextParameterList == null) ? 0 : this.contextParameterList.size();
  }

  public java.util.Iterator<ContextParameter> getContextParameterListIterator() {
    return (this.contextParameterList == null) ? null : this.contextParameterList.iterator();
  }

  public void addToContextParameterList(ContextParameter elem) {
    if (this.contextParameterList == null) {
      this.contextParameterList = new java.util.ArrayList<ContextParameter>();
    }
    this.contextParameterList.add(elem);
  }

  public java.util.List<ContextParameter> getContextParameterList() {
    return this.contextParameterList;
  }

  public JobParameter setContextParameterList(java.util.List<ContextParameter> contextParameterList) {
    this.contextParameterList = contextParameterList;
    return this;
  }

  public void unsetContextParameterList() {
    this.contextParameterList = null;
  }

  /** Returns true if field contextParameterList is set (has been assigned a value) and false otherwise */
  public boolean isSetContextParameterList() {
    return this.contextParameterList != null;
  }

  public void setContextParameterListIsSet(boolean value) {
    if (!value) {
      this.contextParameterList = null;
    }
  }

  public void setFieldValue(_Fields field, java.lang.Object value) {
    switch (field) {
    case TASK_PHASE:
      if (value == null) {
        unsetTaskPhase();
      } else {
        setTaskPhase((com.YYSchedule.common.rpc.domain.task.TaskPhase)value);
      }
      break;

    case CONTEXT_PARAMETER_LIST:
      if (value == null) {
        unsetContextParameterList();
      } else {
        setContextParameterList((java.util.List<ContextParameter>)value);
      }
      break;

    }
  }

  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case TASK_PHASE:
      return getTaskPhase();

    case CONTEXT_PARAMETER_LIST:
      return getContextParameterList();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case TASK_PHASE:
      return isSetTaskPhase();
    case CONTEXT_PARAMETER_LIST:
      return isSetContextParameterList();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof JobParameter)
      return this.equals((JobParameter)that);
    return false;
  }

  public boolean equals(JobParameter that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_taskPhase = true && this.isSetTaskPhase();
    boolean that_present_taskPhase = true && that.isSetTaskPhase();
    if (this_present_taskPhase || that_present_taskPhase) {
      if (!(this_present_taskPhase && that_present_taskPhase))
        return false;
      if (!this.taskPhase.equals(that.taskPhase))
        return false;
    }

    boolean this_present_contextParameterList = true && this.isSetContextParameterList();
    boolean that_present_contextParameterList = true && that.isSetContextParameterList();
    if (this_present_contextParameterList || that_present_contextParameterList) {
      if (!(this_present_contextParameterList && that_present_contextParameterList))
        return false;
      if (!this.contextParameterList.equals(that.contextParameterList))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetTaskPhase()) ? 131071 : 524287);
    if (isSetTaskPhase())
      hashCode = hashCode * 8191 + taskPhase.getValue();

    hashCode = hashCode * 8191 + ((isSetContextParameterList()) ? 131071 : 524287);
    if (isSetContextParameterList())
      hashCode = hashCode * 8191 + contextParameterList.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(JobParameter other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(isSetTaskPhase()).compareTo(other.isSetTaskPhase());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTaskPhase()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.taskPhase, other.taskPhase);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetContextParameterList()).compareTo(other.isSetContextParameterList());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetContextParameterList()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.contextParameterList, other.contextParameterList);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("JobParameter(");
    boolean first = true;

    sb.append("taskPhase:");
    if (this.taskPhase == null) {
      sb.append("null");
    } else {
      sb.append(this.taskPhase);
    }
    first = false;
    if (isSetContextParameterList()) {
      if (!first) sb.append(", ");
      sb.append("contextParameterList:");
      if (this.contextParameterList == null) {
        sb.append("null");
      } else {
        sb.append(this.contextParameterList);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (taskPhase == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'taskPhase' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class JobParameterStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public JobParameterStandardScheme getScheme() {
      return new JobParameterStandardScheme();
    }
  }

  private static class JobParameterStandardScheme extends org.apache.thrift.scheme.StandardScheme<JobParameter> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, JobParameter struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // TASK_PHASE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.taskPhase = com.YYSchedule.common.rpc.domain.task.TaskPhase.findByValue(iprot.readI32());
              struct.setTaskPhaseIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // CONTEXT_PARAMETER_LIST
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
                struct.contextParameterList = new java.util.ArrayList<ContextParameter>(_list0.size);
                ContextParameter _elem1;
                for (int _i2 = 0; _i2 < _list0.size; ++_i2)
                {
                  _elem1 = new ContextParameter();
                  _elem1.read(iprot);
                  struct.contextParameterList.add(_elem1);
                }
                iprot.readListEnd();
              }
              struct.setContextParameterListIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, JobParameter struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.taskPhase != null) {
        oprot.writeFieldBegin(TASK_PHASE_FIELD_DESC);
        oprot.writeI32(struct.taskPhase.getValue());
        oprot.writeFieldEnd();
      }
      if (struct.contextParameterList != null) {
        if (struct.isSetContextParameterList()) {
          oprot.writeFieldBegin(CONTEXT_PARAMETER_LIST_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.contextParameterList.size()));
            for (ContextParameter _iter3 : struct.contextParameterList)
            {
              _iter3.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class JobParameterTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public JobParameterTupleScheme getScheme() {
      return new JobParameterTupleScheme();
    }
  }

  private static class JobParameterTupleScheme extends org.apache.thrift.scheme.TupleScheme<JobParameter> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, JobParameter struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      oprot.writeI32(struct.taskPhase.getValue());
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetContextParameterList()) {
        optionals.set(0);
      }
      oprot.writeBitSet(optionals, 1);
      if (struct.isSetContextParameterList()) {
        {
          oprot.writeI32(struct.contextParameterList.size());
          for (ContextParameter _iter4 : struct.contextParameterList)
          {
            _iter4.write(oprot);
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, JobParameter struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      struct.taskPhase = com.YYSchedule.common.rpc.domain.task.TaskPhase.findByValue(iprot.readI32());
      struct.setTaskPhaseIsSet(true);
      java.util.BitSet incoming = iprot.readBitSet(1);
      if (incoming.get(0)) {
        {
          org.apache.thrift.protocol.TList _list5 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.contextParameterList = new java.util.ArrayList<ContextParameter>(_list5.size);
          ContextParameter _elem6;
          for (int _i7 = 0; _i7 < _list5.size; ++_i7)
          {
            _elem6 = new ContextParameter();
            _elem6.read(iprot);
            struct.contextParameterList.add(_elem6);
          }
        }
        struct.setContextParameterListIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

