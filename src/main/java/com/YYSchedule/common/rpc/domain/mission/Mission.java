/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.YYSchedule.common.rpc.domain.mission;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
/**
 * mission
 */
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.10.0)", date = "2018-09-30")
public class Mission implements org.apache.thrift.TBase<Mission, Mission._Fields>, java.io.Serializable, Cloneable, Comparable<Mission> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Mission");

  private static final org.apache.thrift.protocol.TField USER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("userId", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField MISSION_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("missionName", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField MISSION_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("missionId", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField JOB_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField("jobList", org.apache.thrift.protocol.TType.LIST, (short)4);
  private static final org.apache.thrift.protocol.TField IMPATIENCE_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("impatienceTime", org.apache.thrift.protocol.TType.I64, (short)5);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new MissionStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new MissionTupleSchemeFactory();

  public int userId; // required
  public java.lang.String missionName; // required
  public int missionId; // optional
  public java.util.List<com.YYSchedule.common.rpc.domain.job.Job> jobList; // required
  public long impatienceTime; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    USER_ID((short)1, "userId"),
    MISSION_NAME((short)2, "missionName"),
    MISSION_ID((short)3, "missionId"),
    JOB_LIST((short)4, "jobList"),
    IMPATIENCE_TIME((short)5, "impatienceTime");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // USER_ID
          return USER_ID;
        case 2: // MISSION_NAME
          return MISSION_NAME;
        case 3: // MISSION_ID
          return MISSION_ID;
        case 4: // JOB_LIST
          return JOB_LIST;
        case 5: // IMPATIENCE_TIME
          return IMPATIENCE_TIME;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __USERID_ISSET_ID = 0;
  private static final int __MISSIONID_ISSET_ID = 1;
  private static final int __IMPATIENCETIME_ISSET_ID = 2;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.MISSION_ID,_Fields.IMPATIENCE_TIME};
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.USER_ID, new org.apache.thrift.meta_data.FieldMetaData("userId", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.MISSION_NAME, new org.apache.thrift.meta_data.FieldMetaData("missionName", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.MISSION_ID, new org.apache.thrift.meta_data.FieldMetaData("missionId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.JOB_LIST, new org.apache.thrift.meta_data.FieldMetaData("jobList", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.YYSchedule.common.rpc.domain.job.Job.class))));
    tmpMap.put(_Fields.IMPATIENCE_TIME, new org.apache.thrift.meta_data.FieldMetaData("impatienceTime", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Mission.class, metaDataMap);
  }

  public Mission() {
  }

  public Mission(
    int userId,
    java.lang.String missionName,
    java.util.List<com.YYSchedule.common.rpc.domain.job.Job> jobList)
  {
    this();
    this.userId = userId;
    setUserIdIsSet(true);
    this.missionName = missionName;
    this.jobList = jobList;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public Mission(Mission other) {
    __isset_bitfield = other.__isset_bitfield;
    this.userId = other.userId;
    if (other.isSetMissionName()) {
      this.missionName = other.missionName;
    }
    this.missionId = other.missionId;
    if (other.isSetJobList()) {
      java.util.List<com.YYSchedule.common.rpc.domain.job.Job> __this__jobList = new java.util.ArrayList<com.YYSchedule.common.rpc.domain.job.Job>(other.jobList.size());
      for (com.YYSchedule.common.rpc.domain.job.Job other_element : other.jobList) {
        __this__jobList.add(new com.YYSchedule.common.rpc.domain.job.Job(other_element));
      }
      this.jobList = __this__jobList;
    }
    this.impatienceTime = other.impatienceTime;
  }

  public Mission deepCopy() {
    return new Mission(this);
  }

  @Override
  public void clear() {
    setUserIdIsSet(false);
    this.userId = 0;
    this.missionName = null;
    setMissionIdIsSet(false);
    this.missionId = 0;
    this.jobList = null;
    setImpatienceTimeIsSet(false);
    this.impatienceTime = 0;
  }

  public int getUserId() {
    return this.userId;
  }

  public Mission setUserId(int userId) {
    this.userId = userId;
    setUserIdIsSet(true);
    return this;
  }

  public void unsetUserId() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __USERID_ISSET_ID);
  }

  /** Returns true if field userId is set (has been assigned a value) and false otherwise */
  public boolean isSetUserId() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __USERID_ISSET_ID);
  }

  public void setUserIdIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __USERID_ISSET_ID, value);
  }

  public java.lang.String getMissionName() {
    return this.missionName;
  }

  public Mission setMissionName(java.lang.String missionName) {
    this.missionName = missionName;
    return this;
  }

  public void unsetMissionName() {
    this.missionName = null;
  }

  /** Returns true if field missionName is set (has been assigned a value) and false otherwise */
  public boolean isSetMissionName() {
    return this.missionName != null;
  }

  public void setMissionNameIsSet(boolean value) {
    if (!value) {
      this.missionName = null;
    }
  }

  public int getMissionId() {
    return this.missionId;
  }

  public Mission setMissionId(int missionId) {
    this.missionId = missionId;
    setMissionIdIsSet(true);
    return this;
  }

  public void unsetMissionId() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __MISSIONID_ISSET_ID);
  }

  /** Returns true if field missionId is set (has been assigned a value) and false otherwise */
  public boolean isSetMissionId() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __MISSIONID_ISSET_ID);
  }

  public void setMissionIdIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __MISSIONID_ISSET_ID, value);
  }

  public int getJobListSize() {
    return (this.jobList == null) ? 0 : this.jobList.size();
  }

  public java.util.Iterator<com.YYSchedule.common.rpc.domain.job.Job> getJobListIterator() {
    return (this.jobList == null) ? null : this.jobList.iterator();
  }

  public void addToJobList(com.YYSchedule.common.rpc.domain.job.Job elem) {
    if (this.jobList == null) {
      this.jobList = new java.util.ArrayList<com.YYSchedule.common.rpc.domain.job.Job>();
    }
    this.jobList.add(elem);
  }

  public java.util.List<com.YYSchedule.common.rpc.domain.job.Job> getJobList() {
    return this.jobList;
  }

  public Mission setJobList(java.util.List<com.YYSchedule.common.rpc.domain.job.Job> jobList) {
    this.jobList = jobList;
    return this;
  }

  public void unsetJobList() {
    this.jobList = null;
  }

  /** Returns true if field jobList is set (has been assigned a value) and false otherwise */
  public boolean isSetJobList() {
    return this.jobList != null;
  }

  public void setJobListIsSet(boolean value) {
    if (!value) {
      this.jobList = null;
    }
  }

  public long getImpatienceTime() {
    return this.impatienceTime;
  }

  public Mission setImpatienceTime(long impatienceTime) {
    this.impatienceTime = impatienceTime;
    setImpatienceTimeIsSet(true);
    return this;
  }

  public void unsetImpatienceTime() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __IMPATIENCETIME_ISSET_ID);
  }

  /** Returns true if field impatienceTime is set (has been assigned a value) and false otherwise */
  public boolean isSetImpatienceTime() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __IMPATIENCETIME_ISSET_ID);
  }

  public void setImpatienceTimeIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __IMPATIENCETIME_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, java.lang.Object value) {
    switch (field) {
    case USER_ID:
      if (value == null) {
        unsetUserId();
      } else {
        setUserId((java.lang.Integer)value);
      }
      break;

    case MISSION_NAME:
      if (value == null) {
        unsetMissionName();
      } else {
        setMissionName((java.lang.String)value);
      }
      break;

    case MISSION_ID:
      if (value == null) {
        unsetMissionId();
      } else {
        setMissionId((java.lang.Integer)value);
      }
      break;

    case JOB_LIST:
      if (value == null) {
        unsetJobList();
      } else {
        setJobList((java.util.List<com.YYSchedule.common.rpc.domain.job.Job>)value);
      }
      break;

    case IMPATIENCE_TIME:
      if (value == null) {
        unsetImpatienceTime();
      } else {
        setImpatienceTime((java.lang.Long)value);
      }
      break;

    }
  }

  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case USER_ID:
      return getUserId();

    case MISSION_NAME:
      return getMissionName();

    case MISSION_ID:
      return getMissionId();

    case JOB_LIST:
      return getJobList();

    case IMPATIENCE_TIME:
      return getImpatienceTime();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case USER_ID:
      return isSetUserId();
    case MISSION_NAME:
      return isSetMissionName();
    case MISSION_ID:
      return isSetMissionId();
    case JOB_LIST:
      return isSetJobList();
    case IMPATIENCE_TIME:
      return isSetImpatienceTime();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof Mission)
      return this.equals((Mission)that);
    return false;
  }

  public boolean equals(Mission that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_userId = true;
    boolean that_present_userId = true;
    if (this_present_userId || that_present_userId) {
      if (!(this_present_userId && that_present_userId))
        return false;
      if (this.userId != that.userId)
        return false;
    }

    boolean this_present_missionName = true && this.isSetMissionName();
    boolean that_present_missionName = true && that.isSetMissionName();
    if (this_present_missionName || that_present_missionName) {
      if (!(this_present_missionName && that_present_missionName))
        return false;
      if (!this.missionName.equals(that.missionName))
        return false;
    }

    boolean this_present_missionId = true && this.isSetMissionId();
    boolean that_present_missionId = true && that.isSetMissionId();
    if (this_present_missionId || that_present_missionId) {
      if (!(this_present_missionId && that_present_missionId))
        return false;
      if (this.missionId != that.missionId)
        return false;
    }

    boolean this_present_jobList = true && this.isSetJobList();
    boolean that_present_jobList = true && that.isSetJobList();
    if (this_present_jobList || that_present_jobList) {
      if (!(this_present_jobList && that_present_jobList))
        return false;
      if (!this.jobList.equals(that.jobList))
        return false;
    }

    boolean this_present_impatienceTime = true && this.isSetImpatienceTime();
    boolean that_present_impatienceTime = true && that.isSetImpatienceTime();
    if (this_present_impatienceTime || that_present_impatienceTime) {
      if (!(this_present_impatienceTime && that_present_impatienceTime))
        return false;
      if (this.impatienceTime != that.impatienceTime)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + userId;

    hashCode = hashCode * 8191 + ((isSetMissionName()) ? 131071 : 524287);
    if (isSetMissionName())
      hashCode = hashCode * 8191 + missionName.hashCode();

    hashCode = hashCode * 8191 + ((isSetMissionId()) ? 131071 : 524287);
    if (isSetMissionId())
      hashCode = hashCode * 8191 + missionId;

    hashCode = hashCode * 8191 + ((isSetJobList()) ? 131071 : 524287);
    if (isSetJobList())
      hashCode = hashCode * 8191 + jobList.hashCode();

    hashCode = hashCode * 8191 + ((isSetImpatienceTime()) ? 131071 : 524287);
    if (isSetImpatienceTime())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(impatienceTime);

    return hashCode;
  }

  @Override
  public int compareTo(Mission other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(isSetUserId()).compareTo(other.isSetUserId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUserId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userId, other.userId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetMissionName()).compareTo(other.isSetMissionName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMissionName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.missionName, other.missionName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetMissionId()).compareTo(other.isSetMissionId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMissionId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.missionId, other.missionId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetJobList()).compareTo(other.isSetJobList());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetJobList()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.jobList, other.jobList);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetImpatienceTime()).compareTo(other.isSetImpatienceTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetImpatienceTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.impatienceTime, other.impatienceTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("Mission(");
    boolean first = true;

    sb.append("userId:");
    sb.append(this.userId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("missionName:");
    if (this.missionName == null) {
      sb.append("null");
    } else {
      sb.append(this.missionName);
    }
    first = false;
    if (isSetMissionId()) {
      if (!first) sb.append(", ");
      sb.append("missionId:");
      sb.append(this.missionId);
      first = false;
    }
    if (!first) sb.append(", ");
    sb.append("jobList:");
    if (this.jobList == null) {
      sb.append("null");
    } else {
      sb.append(this.jobList);
    }
    first = false;
    if (isSetImpatienceTime()) {
      if (!first) sb.append(", ");
      sb.append("impatienceTime:");
      sb.append(this.impatienceTime);
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // alas, we cannot check 'userId' because it's a primitive and you chose the non-beans generator.
    if (missionName == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'missionName' was not present! Struct: " + toString());
    }
    if (jobList == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'jobList' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class MissionStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public MissionStandardScheme getScheme() {
      return new MissionStandardScheme();
    }
  }

  private static class MissionStandardScheme extends org.apache.thrift.scheme.StandardScheme<Mission> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, Mission struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // USER_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.userId = iprot.readI32();
              struct.setUserIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // MISSION_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.missionName = iprot.readString();
              struct.setMissionNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // MISSION_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.missionId = iprot.readI32();
              struct.setMissionIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // JOB_LIST
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
                struct.jobList = new java.util.ArrayList<com.YYSchedule.common.rpc.domain.job.Job>(_list0.size);
                com.YYSchedule.common.rpc.domain.job.Job _elem1;
                for (int _i2 = 0; _i2 < _list0.size; ++_i2)
                {
                  _elem1 = new com.YYSchedule.common.rpc.domain.job.Job();
                  _elem1.read(iprot);
                  struct.jobList.add(_elem1);
                }
                iprot.readListEnd();
              }
              struct.setJobListIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // IMPATIENCE_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.impatienceTime = iprot.readI64();
              struct.setImpatienceTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      if (!struct.isSetUserId()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'userId' was not found in serialized data! Struct: " + toString());
      }
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, Mission struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(USER_ID_FIELD_DESC);
      oprot.writeI32(struct.userId);
      oprot.writeFieldEnd();
      if (struct.missionName != null) {
        oprot.writeFieldBegin(MISSION_NAME_FIELD_DESC);
        oprot.writeString(struct.missionName);
        oprot.writeFieldEnd();
      }
      if (struct.isSetMissionId()) {
        oprot.writeFieldBegin(MISSION_ID_FIELD_DESC);
        oprot.writeI32(struct.missionId);
        oprot.writeFieldEnd();
      }
      if (struct.jobList != null) {
        oprot.writeFieldBegin(JOB_LIST_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.jobList.size()));
          for (com.YYSchedule.common.rpc.domain.job.Job _iter3 : struct.jobList)
          {
            _iter3.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.isSetImpatienceTime()) {
        oprot.writeFieldBegin(IMPATIENCE_TIME_FIELD_DESC);
        oprot.writeI64(struct.impatienceTime);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class MissionTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public MissionTupleScheme getScheme() {
      return new MissionTupleScheme();
    }
  }

  private static class MissionTupleScheme extends org.apache.thrift.scheme.TupleScheme<Mission> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, Mission struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      oprot.writeI32(struct.userId);
      oprot.writeString(struct.missionName);
      {
        oprot.writeI32(struct.jobList.size());
        for (com.YYSchedule.common.rpc.domain.job.Job _iter4 : struct.jobList)
        {
          _iter4.write(oprot);
        }
      }
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetMissionId()) {
        optionals.set(0);
      }
      if (struct.isSetImpatienceTime()) {
        optionals.set(1);
      }
      oprot.writeBitSet(optionals, 2);
      if (struct.isSetMissionId()) {
        oprot.writeI32(struct.missionId);
      }
      if (struct.isSetImpatienceTime()) {
        oprot.writeI64(struct.impatienceTime);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, Mission struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      struct.userId = iprot.readI32();
      struct.setUserIdIsSet(true);
      struct.missionName = iprot.readString();
      struct.setMissionNameIsSet(true);
      {
        org.apache.thrift.protocol.TList _list5 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
        struct.jobList = new java.util.ArrayList<com.YYSchedule.common.rpc.domain.job.Job>(_list5.size);
        com.YYSchedule.common.rpc.domain.job.Job _elem6;
        for (int _i7 = 0; _i7 < _list5.size; ++_i7)
        {
          _elem6 = new com.YYSchedule.common.rpc.domain.job.Job();
          _elem6.read(iprot);
          struct.jobList.add(_elem6);
        }
      }
      struct.setJobListIsSet(true);
      java.util.BitSet incoming = iprot.readBitSet(2);
      if (incoming.get(0)) {
        struct.missionId = iprot.readI32();
        struct.setMissionIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.impatienceTime = iprot.readI64();
        struct.setImpatienceTimeIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

