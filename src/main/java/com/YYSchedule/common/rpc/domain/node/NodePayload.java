/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.YYSchedule.common.rpc.domain.node;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
/**
 * nodeRuntime:运行时参数
 * queueLimit:单条队列最大长度
 * queueLength:单条队列现在长度
 * consumerThreadNum:线程个数
 */
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.10.0)", date = "2018-08-14")
public class NodePayload implements org.apache.thrift.TBase<NodePayload, NodePayload._Fields>, java.io.Serializable, Cloneable, Comparable<NodePayload> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("NodePayload");

  private static final org.apache.thrift.protocol.TField NODE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("nodeId", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField NODE_RUNTIME_FIELD_DESC = new org.apache.thrift.protocol.TField("nodeRuntime", org.apache.thrift.protocol.TType.STRUCT, (short)2);
  private static final org.apache.thrift.protocol.TField QUEUE_LIMIT_FIELD_DESC = new org.apache.thrift.protocol.TField("queueLimit", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField QUEUE_LENGTH_FIELD_DESC = new org.apache.thrift.protocol.TField("queueLength", org.apache.thrift.protocol.TType.I32, (short)4);
  private static final org.apache.thrift.protocol.TField CONSUMER_THREAD_NUM_FIELD_DESC = new org.apache.thrift.protocol.TField("consumerThreadNum", org.apache.thrift.protocol.TType.I32, (short)5);
  private static final org.apache.thrift.protocol.TField TASK_PHASE_FIELD_DESC = new org.apache.thrift.protocol.TField("taskPhase", org.apache.thrift.protocol.TType.I32, (short)6);
  private static final org.apache.thrift.protocol.TField ENGINE_LOGGER_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField("engineLoggerList", org.apache.thrift.protocol.TType.LIST, (short)7);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new NodePayloadStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new NodePayloadTupleSchemeFactory();

  public java.lang.String nodeId; // required
  public NodeRuntime nodeRuntime; // required
  public int queueLimit; // required
  public int queueLength; // required
  public int consumerThreadNum; // required
  /**
   * 
   * @see com.YYSchedule.common.rpc.domain.task.TaskPhase
   */
  public com.YYSchedule.common.rpc.domain.task.TaskPhase taskPhase; // required
  public java.util.List<com.YYSchedule.common.rpc.domain.engine.EngineLogger> engineLoggerList; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    NODE_ID((short)1, "nodeId"),
    NODE_RUNTIME((short)2, "nodeRuntime"),
    QUEUE_LIMIT((short)3, "queueLimit"),
    QUEUE_LENGTH((short)4, "queueLength"),
    CONSUMER_THREAD_NUM((short)5, "consumerThreadNum"),
    /**
     * 
     * @see com.YYSchedule.common.rpc.domain.task.TaskPhase
     */
    TASK_PHASE((short)6, "taskPhase"),
    ENGINE_LOGGER_LIST((short)7, "engineLoggerList");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // NODE_ID
          return NODE_ID;
        case 2: // NODE_RUNTIME
          return NODE_RUNTIME;
        case 3: // QUEUE_LIMIT
          return QUEUE_LIMIT;
        case 4: // QUEUE_LENGTH
          return QUEUE_LENGTH;
        case 5: // CONSUMER_THREAD_NUM
          return CONSUMER_THREAD_NUM;
        case 6: // TASK_PHASE
          return TASK_PHASE;
        case 7: // ENGINE_LOGGER_LIST
          return ENGINE_LOGGER_LIST;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __QUEUELIMIT_ISSET_ID = 0;
  private static final int __QUEUELENGTH_ISSET_ID = 1;
  private static final int __CONSUMERTHREADNUM_ISSET_ID = 2;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.ENGINE_LOGGER_LIST};
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.NODE_ID, new org.apache.thrift.meta_data.FieldMetaData("nodeId", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.NODE_RUNTIME, new org.apache.thrift.meta_data.FieldMetaData("nodeRuntime", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, NodeRuntime.class)));
    tmpMap.put(_Fields.QUEUE_LIMIT, new org.apache.thrift.meta_data.FieldMetaData("queueLimit", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.QUEUE_LENGTH, new org.apache.thrift.meta_data.FieldMetaData("queueLength", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.CONSUMER_THREAD_NUM, new org.apache.thrift.meta_data.FieldMetaData("consumerThreadNum", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.TASK_PHASE, new org.apache.thrift.meta_data.FieldMetaData("taskPhase", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, com.YYSchedule.common.rpc.domain.task.TaskPhase.class)));
    tmpMap.put(_Fields.ENGINE_LOGGER_LIST, new org.apache.thrift.meta_data.FieldMetaData("engineLoggerList", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.YYSchedule.common.rpc.domain.engine.EngineLogger.class))));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(NodePayload.class, metaDataMap);
  }

  public NodePayload() {
  }

  public NodePayload(
    java.lang.String nodeId,
    NodeRuntime nodeRuntime,
    int queueLimit,
    int queueLength,
    int consumerThreadNum,
    com.YYSchedule.common.rpc.domain.task.TaskPhase taskPhase)
  {
    this();
    this.nodeId = nodeId;
    this.nodeRuntime = nodeRuntime;
    this.queueLimit = queueLimit;
    setQueueLimitIsSet(true);
    this.queueLength = queueLength;
    setQueueLengthIsSet(true);
    this.consumerThreadNum = consumerThreadNum;
    setConsumerThreadNumIsSet(true);
    this.taskPhase = taskPhase;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public NodePayload(NodePayload other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetNodeId()) {
      this.nodeId = other.nodeId;
    }
    if (other.isSetNodeRuntime()) {
      this.nodeRuntime = new NodeRuntime(other.nodeRuntime);
    }
    this.queueLimit = other.queueLimit;
    this.queueLength = other.queueLength;
    this.consumerThreadNum = other.consumerThreadNum;
    if (other.isSetTaskPhase()) {
      this.taskPhase = other.taskPhase;
    }
    if (other.isSetEngineLoggerList()) {
      java.util.List<com.YYSchedule.common.rpc.domain.engine.EngineLogger> __this__engineLoggerList = new java.util.ArrayList<com.YYSchedule.common.rpc.domain.engine.EngineLogger>(other.engineLoggerList.size());
      for (com.YYSchedule.common.rpc.domain.engine.EngineLogger other_element : other.engineLoggerList) {
        __this__engineLoggerList.add(new com.YYSchedule.common.rpc.domain.engine.EngineLogger(other_element));
      }
      this.engineLoggerList = __this__engineLoggerList;
    }
  }

  public NodePayload deepCopy() {
    return new NodePayload(this);
  }

  @Override
  public void clear() {
    this.nodeId = null;
    this.nodeRuntime = null;
    setQueueLimitIsSet(false);
    this.queueLimit = 0;
    setQueueLengthIsSet(false);
    this.queueLength = 0;
    setConsumerThreadNumIsSet(false);
    this.consumerThreadNum = 0;
    this.taskPhase = null;
    this.engineLoggerList = null;
  }

  public java.lang.String getNodeId() {
    return this.nodeId;
  }

  public NodePayload setNodeId(java.lang.String nodeId) {
    this.nodeId = nodeId;
    return this;
  }

  public void unsetNodeId() {
    this.nodeId = null;
  }

  /** Returns true if field nodeId is set (has been assigned a value) and false otherwise */
  public boolean isSetNodeId() {
    return this.nodeId != null;
  }

  public void setNodeIdIsSet(boolean value) {
    if (!value) {
      this.nodeId = null;
    }
  }

  public NodeRuntime getNodeRuntime() {
    return this.nodeRuntime;
  }

  public NodePayload setNodeRuntime(NodeRuntime nodeRuntime) {
    this.nodeRuntime = nodeRuntime;
    return this;
  }

  public void unsetNodeRuntime() {
    this.nodeRuntime = null;
  }

  /** Returns true if field nodeRuntime is set (has been assigned a value) and false otherwise */
  public boolean isSetNodeRuntime() {
    return this.nodeRuntime != null;
  }

  public void setNodeRuntimeIsSet(boolean value) {
    if (!value) {
      this.nodeRuntime = null;
    }
  }

  public int getQueueLimit() {
    return this.queueLimit;
  }

  public NodePayload setQueueLimit(int queueLimit) {
    this.queueLimit = queueLimit;
    setQueueLimitIsSet(true);
    return this;
  }

  public void unsetQueueLimit() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __QUEUELIMIT_ISSET_ID);
  }

  /** Returns true if field queueLimit is set (has been assigned a value) and false otherwise */
  public boolean isSetQueueLimit() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __QUEUELIMIT_ISSET_ID);
  }

  public void setQueueLimitIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __QUEUELIMIT_ISSET_ID, value);
  }

  public int getQueueLength() {
    return this.queueLength;
  }

  public NodePayload setQueueLength(int queueLength) {
    this.queueLength = queueLength;
    setQueueLengthIsSet(true);
    return this;
  }

  public void unsetQueueLength() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __QUEUELENGTH_ISSET_ID);
  }

  /** Returns true if field queueLength is set (has been assigned a value) and false otherwise */
  public boolean isSetQueueLength() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __QUEUELENGTH_ISSET_ID);
  }

  public void setQueueLengthIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __QUEUELENGTH_ISSET_ID, value);
  }

  public int getConsumerThreadNum() {
    return this.consumerThreadNum;
  }

  public NodePayload setConsumerThreadNum(int consumerThreadNum) {
    this.consumerThreadNum = consumerThreadNum;
    setConsumerThreadNumIsSet(true);
    return this;
  }

  public void unsetConsumerThreadNum() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __CONSUMERTHREADNUM_ISSET_ID);
  }

  /** Returns true if field consumerThreadNum is set (has been assigned a value) and false otherwise */
  public boolean isSetConsumerThreadNum() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __CONSUMERTHREADNUM_ISSET_ID);
  }

  public void setConsumerThreadNumIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __CONSUMERTHREADNUM_ISSET_ID, value);
  }

  /**
   * 
   * @see com.YYSchedule.common.rpc.domain.task.TaskPhase
   */
  public com.YYSchedule.common.rpc.domain.task.TaskPhase getTaskPhase() {
    return this.taskPhase;
  }

  /**
   * 
   * @see com.YYSchedule.common.rpc.domain.task.TaskPhase
   */
  public NodePayload setTaskPhase(com.YYSchedule.common.rpc.domain.task.TaskPhase taskPhase) {
    this.taskPhase = taskPhase;
    return this;
  }

  public void unsetTaskPhase() {
    this.taskPhase = null;
  }

  /** Returns true if field taskPhase is set (has been assigned a value) and false otherwise */
  public boolean isSetTaskPhase() {
    return this.taskPhase != null;
  }

  public void setTaskPhaseIsSet(boolean value) {
    if (!value) {
      this.taskPhase = null;
    }
  }

  public int getEngineLoggerListSize() {
    return (this.engineLoggerList == null) ? 0 : this.engineLoggerList.size();
  }

  public java.util.Iterator<com.YYSchedule.common.rpc.domain.engine.EngineLogger> getEngineLoggerListIterator() {
    return (this.engineLoggerList == null) ? null : this.engineLoggerList.iterator();
  }

  public void addToEngineLoggerList(com.YYSchedule.common.rpc.domain.engine.EngineLogger elem) {
    if (this.engineLoggerList == null) {
      this.engineLoggerList = new java.util.ArrayList<com.YYSchedule.common.rpc.domain.engine.EngineLogger>();
    }
    this.engineLoggerList.add(elem);
  }

  public java.util.List<com.YYSchedule.common.rpc.domain.engine.EngineLogger> getEngineLoggerList() {
    return this.engineLoggerList;
  }

  public NodePayload setEngineLoggerList(java.util.List<com.YYSchedule.common.rpc.domain.engine.EngineLogger> engineLoggerList) {
    this.engineLoggerList = engineLoggerList;
    return this;
  }

  public void unsetEngineLoggerList() {
    this.engineLoggerList = null;
  }

  /** Returns true if field engineLoggerList is set (has been assigned a value) and false otherwise */
  public boolean isSetEngineLoggerList() {
    return this.engineLoggerList != null;
  }

  public void setEngineLoggerListIsSet(boolean value) {
    if (!value) {
      this.engineLoggerList = null;
    }
  }

  public void setFieldValue(_Fields field, java.lang.Object value) {
    switch (field) {
    case NODE_ID:
      if (value == null) {
        unsetNodeId();
      } else {
        setNodeId((java.lang.String)value);
      }
      break;

    case NODE_RUNTIME:
      if (value == null) {
        unsetNodeRuntime();
      } else {
        setNodeRuntime((NodeRuntime)value);
      }
      break;

    case QUEUE_LIMIT:
      if (value == null) {
        unsetQueueLimit();
      } else {
        setQueueLimit((java.lang.Integer)value);
      }
      break;

    case QUEUE_LENGTH:
      if (value == null) {
        unsetQueueLength();
      } else {
        setQueueLength((java.lang.Integer)value);
      }
      break;

    case CONSUMER_THREAD_NUM:
      if (value == null) {
        unsetConsumerThreadNum();
      } else {
        setConsumerThreadNum((java.lang.Integer)value);
      }
      break;

    case TASK_PHASE:
      if (value == null) {
        unsetTaskPhase();
      } else {
        setTaskPhase((com.YYSchedule.common.rpc.domain.task.TaskPhase)value);
      }
      break;

    case ENGINE_LOGGER_LIST:
      if (value == null) {
        unsetEngineLoggerList();
      } else {
        setEngineLoggerList((java.util.List<com.YYSchedule.common.rpc.domain.engine.EngineLogger>)value);
      }
      break;

    }
  }

  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case NODE_ID:
      return getNodeId();

    case NODE_RUNTIME:
      return getNodeRuntime();

    case QUEUE_LIMIT:
      return getQueueLimit();

    case QUEUE_LENGTH:
      return getQueueLength();

    case CONSUMER_THREAD_NUM:
      return getConsumerThreadNum();

    case TASK_PHASE:
      return getTaskPhase();

    case ENGINE_LOGGER_LIST:
      return getEngineLoggerList();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case NODE_ID:
      return isSetNodeId();
    case NODE_RUNTIME:
      return isSetNodeRuntime();
    case QUEUE_LIMIT:
      return isSetQueueLimit();
    case QUEUE_LENGTH:
      return isSetQueueLength();
    case CONSUMER_THREAD_NUM:
      return isSetConsumerThreadNum();
    case TASK_PHASE:
      return isSetTaskPhase();
    case ENGINE_LOGGER_LIST:
      return isSetEngineLoggerList();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof NodePayload)
      return this.equals((NodePayload)that);
    return false;
  }

  public boolean equals(NodePayload that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_nodeId = true && this.isSetNodeId();
    boolean that_present_nodeId = true && that.isSetNodeId();
    if (this_present_nodeId || that_present_nodeId) {
      if (!(this_present_nodeId && that_present_nodeId))
        return false;
      if (!this.nodeId.equals(that.nodeId))
        return false;
    }

    boolean this_present_nodeRuntime = true && this.isSetNodeRuntime();
    boolean that_present_nodeRuntime = true && that.isSetNodeRuntime();
    if (this_present_nodeRuntime || that_present_nodeRuntime) {
      if (!(this_present_nodeRuntime && that_present_nodeRuntime))
        return false;
      if (!this.nodeRuntime.equals(that.nodeRuntime))
        return false;
    }

    boolean this_present_queueLimit = true;
    boolean that_present_queueLimit = true;
    if (this_present_queueLimit || that_present_queueLimit) {
      if (!(this_present_queueLimit && that_present_queueLimit))
        return false;
      if (this.queueLimit != that.queueLimit)
        return false;
    }

    boolean this_present_queueLength = true;
    boolean that_present_queueLength = true;
    if (this_present_queueLength || that_present_queueLength) {
      if (!(this_present_queueLength && that_present_queueLength))
        return false;
      if (this.queueLength != that.queueLength)
        return false;
    }

    boolean this_present_consumerThreadNum = true;
    boolean that_present_consumerThreadNum = true;
    if (this_present_consumerThreadNum || that_present_consumerThreadNum) {
      if (!(this_present_consumerThreadNum && that_present_consumerThreadNum))
        return false;
      if (this.consumerThreadNum != that.consumerThreadNum)
        return false;
    }

    boolean this_present_taskPhase = true && this.isSetTaskPhase();
    boolean that_present_taskPhase = true && that.isSetTaskPhase();
    if (this_present_taskPhase || that_present_taskPhase) {
      if (!(this_present_taskPhase && that_present_taskPhase))
        return false;
      if (!this.taskPhase.equals(that.taskPhase))
        return false;
    }

    boolean this_present_engineLoggerList = true && this.isSetEngineLoggerList();
    boolean that_present_engineLoggerList = true && that.isSetEngineLoggerList();
    if (this_present_engineLoggerList || that_present_engineLoggerList) {
      if (!(this_present_engineLoggerList && that_present_engineLoggerList))
        return false;
      if (!this.engineLoggerList.equals(that.engineLoggerList))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetNodeId()) ? 131071 : 524287);
    if (isSetNodeId())
      hashCode = hashCode * 8191 + nodeId.hashCode();

    hashCode = hashCode * 8191 + ((isSetNodeRuntime()) ? 131071 : 524287);
    if (isSetNodeRuntime())
      hashCode = hashCode * 8191 + nodeRuntime.hashCode();

    hashCode = hashCode * 8191 + queueLimit;

    hashCode = hashCode * 8191 + queueLength;

    hashCode = hashCode * 8191 + consumerThreadNum;

    hashCode = hashCode * 8191 + ((isSetTaskPhase()) ? 131071 : 524287);
    if (isSetTaskPhase())
      hashCode = hashCode * 8191 + taskPhase.getValue();

    hashCode = hashCode * 8191 + ((isSetEngineLoggerList()) ? 131071 : 524287);
    if (isSetEngineLoggerList())
      hashCode = hashCode * 8191 + engineLoggerList.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(NodePayload other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(isSetNodeId()).compareTo(other.isSetNodeId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNodeId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.nodeId, other.nodeId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetNodeRuntime()).compareTo(other.isSetNodeRuntime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNodeRuntime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.nodeRuntime, other.nodeRuntime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetQueueLimit()).compareTo(other.isSetQueueLimit());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetQueueLimit()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.queueLimit, other.queueLimit);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetQueueLength()).compareTo(other.isSetQueueLength());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetQueueLength()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.queueLength, other.queueLength);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetConsumerThreadNum()).compareTo(other.isSetConsumerThreadNum());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetConsumerThreadNum()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.consumerThreadNum, other.consumerThreadNum);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetTaskPhase()).compareTo(other.isSetTaskPhase());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTaskPhase()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.taskPhase, other.taskPhase);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetEngineLoggerList()).compareTo(other.isSetEngineLoggerList());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEngineLoggerList()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.engineLoggerList, other.engineLoggerList);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("NodePayload(");
    boolean first = true;

    sb.append("nodeId:");
    if (this.nodeId == null) {
      sb.append("null");
    } else {
      sb.append(this.nodeId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("nodeRuntime:");
    if (this.nodeRuntime == null) {
      sb.append("null");
    } else {
      sb.append(this.nodeRuntime);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("queueLimit:");
    sb.append(this.queueLimit);
    first = false;
    if (!first) sb.append(", ");
    sb.append("queueLength:");
    sb.append(this.queueLength);
    first = false;
    if (!first) sb.append(", ");
    sb.append("consumerThreadNum:");
    sb.append(this.consumerThreadNum);
    first = false;
    if (!first) sb.append(", ");
    sb.append("taskPhase:");
    if (this.taskPhase == null) {
      sb.append("null");
    } else {
      sb.append(this.taskPhase);
    }
    first = false;
    if (isSetEngineLoggerList()) {
      if (!first) sb.append(", ");
      sb.append("engineLoggerList:");
      if (this.engineLoggerList == null) {
        sb.append("null");
      } else {
        sb.append(this.engineLoggerList);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (nodeId == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'nodeId' was not present! Struct: " + toString());
    }
    if (nodeRuntime == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'nodeRuntime' was not present! Struct: " + toString());
    }
    // alas, we cannot check 'queueLimit' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'queueLength' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'consumerThreadNum' because it's a primitive and you chose the non-beans generator.
    if (taskPhase == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'taskPhase' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
    if (nodeRuntime != null) {
      nodeRuntime.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class NodePayloadStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public NodePayloadStandardScheme getScheme() {
      return new NodePayloadStandardScheme();
    }
  }

  private static class NodePayloadStandardScheme extends org.apache.thrift.scheme.StandardScheme<NodePayload> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, NodePayload struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // NODE_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.nodeId = iprot.readString();
              struct.setNodeIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // NODE_RUNTIME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.nodeRuntime = new NodeRuntime();
              struct.nodeRuntime.read(iprot);
              struct.setNodeRuntimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // QUEUE_LIMIT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.queueLimit = iprot.readI32();
              struct.setQueueLimitIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // QUEUE_LENGTH
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.queueLength = iprot.readI32();
              struct.setQueueLengthIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // CONSUMER_THREAD_NUM
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.consumerThreadNum = iprot.readI32();
              struct.setConsumerThreadNumIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // TASK_PHASE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.taskPhase = com.YYSchedule.common.rpc.domain.task.TaskPhase.findByValue(iprot.readI32());
              struct.setTaskPhaseIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // ENGINE_LOGGER_LIST
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
                struct.engineLoggerList = new java.util.ArrayList<com.YYSchedule.common.rpc.domain.engine.EngineLogger>(_list0.size);
                com.YYSchedule.common.rpc.domain.engine.EngineLogger _elem1;
                for (int _i2 = 0; _i2 < _list0.size; ++_i2)
                {
                  _elem1 = new com.YYSchedule.common.rpc.domain.engine.EngineLogger();
                  _elem1.read(iprot);
                  struct.engineLoggerList.add(_elem1);
                }
                iprot.readListEnd();
              }
              struct.setEngineLoggerListIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      if (!struct.isSetQueueLimit()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'queueLimit' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetQueueLength()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'queueLength' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetConsumerThreadNum()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'consumerThreadNum' was not found in serialized data! Struct: " + toString());
      }
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, NodePayload struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.nodeId != null) {
        oprot.writeFieldBegin(NODE_ID_FIELD_DESC);
        oprot.writeString(struct.nodeId);
        oprot.writeFieldEnd();
      }
      if (struct.nodeRuntime != null) {
        oprot.writeFieldBegin(NODE_RUNTIME_FIELD_DESC);
        struct.nodeRuntime.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(QUEUE_LIMIT_FIELD_DESC);
      oprot.writeI32(struct.queueLimit);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(QUEUE_LENGTH_FIELD_DESC);
      oprot.writeI32(struct.queueLength);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(CONSUMER_THREAD_NUM_FIELD_DESC);
      oprot.writeI32(struct.consumerThreadNum);
      oprot.writeFieldEnd();
      if (struct.taskPhase != null) {
        oprot.writeFieldBegin(TASK_PHASE_FIELD_DESC);
        oprot.writeI32(struct.taskPhase.getValue());
        oprot.writeFieldEnd();
      }
      if (struct.engineLoggerList != null) {
        if (struct.isSetEngineLoggerList()) {
          oprot.writeFieldBegin(ENGINE_LOGGER_LIST_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.engineLoggerList.size()));
            for (com.YYSchedule.common.rpc.domain.engine.EngineLogger _iter3 : struct.engineLoggerList)
            {
              _iter3.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class NodePayloadTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public NodePayloadTupleScheme getScheme() {
      return new NodePayloadTupleScheme();
    }
  }

  private static class NodePayloadTupleScheme extends org.apache.thrift.scheme.TupleScheme<NodePayload> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, NodePayload struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      oprot.writeString(struct.nodeId);
      struct.nodeRuntime.write(oprot);
      oprot.writeI32(struct.queueLimit);
      oprot.writeI32(struct.queueLength);
      oprot.writeI32(struct.consumerThreadNum);
      oprot.writeI32(struct.taskPhase.getValue());
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetEngineLoggerList()) {
        optionals.set(0);
      }
      oprot.writeBitSet(optionals, 1);
      if (struct.isSetEngineLoggerList()) {
        {
          oprot.writeI32(struct.engineLoggerList.size());
          for (com.YYSchedule.common.rpc.domain.engine.EngineLogger _iter4 : struct.engineLoggerList)
          {
            _iter4.write(oprot);
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, NodePayload struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      struct.nodeId = iprot.readString();
      struct.setNodeIdIsSet(true);
      struct.nodeRuntime = new NodeRuntime();
      struct.nodeRuntime.read(iprot);
      struct.setNodeRuntimeIsSet(true);
      struct.queueLimit = iprot.readI32();
      struct.setQueueLimitIsSet(true);
      struct.queueLength = iprot.readI32();
      struct.setQueueLengthIsSet(true);
      struct.consumerThreadNum = iprot.readI32();
      struct.setConsumerThreadNumIsSet(true);
      struct.taskPhase = com.YYSchedule.common.rpc.domain.task.TaskPhase.findByValue(iprot.readI32());
      struct.setTaskPhaseIsSet(true);
      java.util.BitSet incoming = iprot.readBitSet(1);
      if (incoming.get(0)) {
        {
          org.apache.thrift.protocol.TList _list5 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.engineLoggerList = new java.util.ArrayList<com.YYSchedule.common.rpc.domain.engine.EngineLogger>(_list5.size);
          com.YYSchedule.common.rpc.domain.engine.EngineLogger _elem6;
          for (int _i7 = 0; _i7 < _list5.size; ++_i7)
          {
            _elem6 = new com.YYSchedule.common.rpc.domain.engine.EngineLogger();
            _elem6.read(iprot);
            struct.engineLoggerList.add(_elem6);
          }
        }
        struct.setEngineLoggerListIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

